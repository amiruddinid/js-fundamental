# SQL

# DDL - DATA DEFINITION LANGUAGE
## Membuat database
CREATE DATABASE <nama_database>;

## List database
\l

## connect ke database
\c <nama_database>

## Membuat table
CREATE TABLE <nama_table> (
    <nama_kolom> <tipe_data> <attribut>
)

## Contoh :
CREATE TABLE users(
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    profile TEXT,
    verified BOOLEAN NOT NULL DEFAULT FALSE
);

# notes

# BIGSERIAL = untuk autoincrement akan otomatis membuat data / value unik setiap menambahkan data
# PRIMARY KEY = menandai kolom yang menjadi primary KEY
# VARCHAR(n) = tipe data text yang di batasi jumlah character nya 1 - 255
# NOT NULL = atribut yang menandai table tidak boleh di isi data kosong
# TEXT = tipe data text yang tidak di batasi jumlah characternya
# BOOLEAN = tipe data BOOLEAN
# DEFAULT <value> = untuk menentukan default value / nilai kolom

# menampilkan list table 
\dt

# ganti nama database
# syarat : tidak boleh menganti nama database yang sedang digunakan / connect
ALTER DATABASE <nama_database_lama> RENAME TO <nama_database_baru>

# ganti nama table
ALTER TABLE <nama_table_lama> RENAME TO <nama_table_baru>;

# menambahkan kolom baru
ALTER TABLE users
ADD COLUMN media VARCHAR;

# melihat detail struktur table
\d+ <nama_table>

# !dangerous section!
# menghapus table
DROP TABLE <nama_table>
DROP DATABASE <nama_database>

# DML - DATA MANIPULATION LANGUAGE
## Menambahkan data
# note : untuk value string menggunakan petik 1
INSERT INTO <nama_table>(column1, column2)
VALUES ('value1', 'value2')

## Menampilkan data yang dan menampilkan semua kolom
SELECT * FROM <nama_table>

## Menampilkan data yang dan menampilkan kolom yang dipilih
SELECT column1, column2 FROM <nama_table>

## Keyword Where untuk menampilkan data dengan kondisi
SELECT <column> FROM users WHERE <kondisi>

## Keyword Where dan like untuk mencari data dengan pattern
SELECT <column> FROM users WHERE <kondisi>

## Update

UPDATE <nama_table>
SET
 column1 = 'value',
 column2 = 'value'
WHERE kondisi 

## DELETE

DELETE FROM <nama_table> WHERE <kondisi>;

#note : lebih baik mengunakan primary key sebagai kondisi untuk memilih data

## STORED PROCEDURE
# sama dengan sebuah void function (yang tidak menghasilkan atau return data) 
  di pemograman yang menyimpan procedure ke database dan akan menerima parameter
# bisa di panggil ketika di butuhkan meskipun terminal tertutup karena sudah tersimpan di database

#buat table akun
drop table if exists akun;

create table akun (
    id int generated by default as identity,
    name varchar(100) not null,
    balance dec(15, 2) not null,
    primary key(id)
);

insert into akun(name, balance)
values('Andi', 100000);

insert into akun(name, balance)
values('Budi', 100000);

#membuat procedure transfer
CREATE OR REPLACE PROCEDURE transfer(
   sender INT,
   receiver INT, 
   amount DEC
)
LANGUAGE plpgsql    
AS $$
BEGIN
    -- subtracting the amount from the sender's account 
    UPDATE akun 
    SET 
        balance = balance - amount,
        transaction = transaction + 1
    WHERE id = sender;

    -- adding the amount to the receiver's account
    UPDATE akun 
    SET 
        balance = balance + amount,
        transaction = transaction + 1
    WHERE id = receiver;

    COMMIT;
END;
$$;

#memanggil procedure transfer
CALL transfer(1, 2, 5000)

#referensi : https://www.postgresql.org/docs/current/sql-createprocedure.html
#apa itu $$: https://stackoverflow.com/questions/12144284/what-are-used-for-in-pl-pgsql/12172353#12172353

#procedure transfer sama seperti :
function transfer(pengirim, penerima, nominal){
    akun[pengirim] = akun[pengirim].saldo - nominal
    akun[penerima] = akun[penerima].saldo + nominal
}
transfer(1, 2, 5000)

#Common Table Expression
# harus ditulis dari with sampai Select * from <nama cte>

WITH richMan AS (
    SELECT name, balance
    FROM akun
    WHERE balance > 100000
)
SELECT *
FROM richMan;